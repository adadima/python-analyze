def bfs(n, count=0, used=None):
    global min_k, first
    if used is None:
        used = {n}
    if count < 3:
        for i in edge[n]:
            if i not in used:
                used.add(i)
                bfs(i, count + 1, used)
                used.discard(i)
            else:
                bfs(i, count + 1, used)
    elif n in used and len(used) == 3 and n == first:
        summ = 0
        for i in used:
            summ += len(edge[i]) - 2 if len(edge[i]) > 1 else 10 ** 18
        if min_k > summ:
            min_k = summ

w, pairs = map(int, input().split())
edge = [[] for i in range(w + 1)]
for i in range(pairs):
    f, s = map(int, input().split())
    edge[f] += [s]
    edge[s] += [f]
min_k = 10 ** 18
for i in range(1, w + 1):
    first = i
    bfs(i)
print(min_k if min_k != 10 ** 18 else -1)