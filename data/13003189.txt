import sys
import bisect

def x(point):
    return point[0]

def y(point):
    return point[1]

def dist(a, b):
    return abs(x(a) - x(b)) + abs(y(a) - y(b))

def hamiltonian_path_length(path, points):
    return sum([dist(points[path[i]-1], points[path[i+1]-1])
                for i in range(0, len(path)-1)])

n      = int(sys.stdin.readline())
points = []
for i in range(1, n+1):
    coord = sys.stdin.readline().split() + [i]
    bisect.insort_left(points, coord)

hamiltonian_path = map(lambda p: p[2], points)

#points = [[int(xy) for xy in sys.stdin.readline().split()]
#          for _ in range(n)]
#origin = (0, 0)
#hamiltonian_path = sorted(list(range(1, n+1)), key=lambda i: dist(origin, points[i-1]))
#hamiltonian_path = sorted(list(range(1, n+1)), key=lambda i: dist(origin, points[i-1]))

# print(hamiltonian_path_length(hamiltonian_path, points))
for i in hamiltonian_path:
    print(i, end=' ')
print()